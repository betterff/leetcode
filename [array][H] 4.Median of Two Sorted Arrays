class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        double median=0.0;
        int flag=0;
        if((nums1.size()+nums2.size())%2)
        {
            flag=1;
        }
        int i=0,j=0;
        double num=0.0;
        int count=0;
        while(count<(nums1.size()+nums2.size())/2)
        {
            if(i<nums1.size() && j<nums2.size())
            {
                if(nums1[i]>nums2[j])
                {
                    num=nums2[j];
                    j++;
                    count++;
                }
                else
                {
                    num=nums1[i];
                    i++;
                    count++;
                }
            }
            else if(i>=nums1.size())
            {
                num=nums2[j];
                j++;
                count++;
            }
            else if(j>=nums2.size())
            {
                num=nums1[i];
                i++;
                count++;
            }
        }
        if(flag==1) 
        {
            if(i<nums1.size() && j<nums2.size())
            {
                num=(nums1[i]>nums2[j]?nums2[j]:nums1[i]);
            }
            else if(i>=nums1.size())
            {
                num=nums2[j];
            }
            else
            {
                num=nums1[i];
            }
        }
        else
        {
            if(i<nums1.size() && j<nums2.size())
            {
                num=(num+double(nums1[i]>nums2[j]?nums2[j]:nums1[i]))/2.0;
            }
            else if(i>=nums1.size())
            {
                num=(num+nums2[j])/2.0;
            }
            else
            {
                num=(num+nums1[i])/2.0;
            }
        }
        return num;
    }
};